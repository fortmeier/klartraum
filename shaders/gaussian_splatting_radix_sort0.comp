#version 450

#include "gaussian_splatting_radix_sort_include.glsl"

layout(local_size_x = 256) in;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= inputBuffer2.numberTotalGaussians) return;

    if (idx == 0) {
        if (debug) {
            debugPrintfEXT("Radix sort pass: %u\n", pushConstants.pass);
            debugPrintfEXT("Initial Number of elements: %u\n", pushConstants.numElements);
            debugPrintfEXT("Number of elements: %u\n", inputBuffer2.numberTotalGaussians);
        }
    }

    // get the value to sort (use z here)
    uint value = floatBitsToUint(inputBuffer.gaussians[idx].z);
    uint binMask = inputBuffer.gaussians[idx].binMask;
    
    // get the bin of the current value for the current pass
    uint bin = getBin(value, binMask, pushConstants.pass);

    // count the occurrences of this bin
    atomicAdd(countBuffer.counts[bin], 1);

}