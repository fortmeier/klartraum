#version 450

#include "gsplat_radix_sort_include.glsl"

layout(local_size_x = 16) in;

shared uint cumulativeSum[16];

void main() {
    /* This shader computes the prefix sum of the histogram bins.
     * It takes the local histograms computed in the previous shader
     * and computes the cumulative sum for each bin.
     * The result is stored in a shared buffer which is then used
     * to compute the offsets for scattering elements into their
     * final positions.
     * Note that the total offset of each bin is stored in the
     * offsetBuffer.offsets array and has to be used in the next shader
     * to scatter the elements to the right positions in the output buffer.
     */

    uint binIdx = gl_LocalInvocationID.x;

    cumulativeSum[binIdx] = 0;

    if (gl_WorkGroupID.x > 0) {
        return;
    }

    uint totalNumberHistograms = inputBuffer2.numberTotalGaussians / 128 + 1;

    uint oldValue = 0;
    for (uint idx = 0; idx < totalNumberHistograms; idx++) {
        uint globalBinIdx = idx * 16 + binIdx;
        uint newValue = inputBuffer3.histogram[globalBinIdx];

        inputBuffer3.histogram[globalBinIdx] = oldValue;
        oldValue += newValue;
    }

    cumulativeSum[binIdx] = oldValue;

    barrier();

    offsetBuffer.offsets[0] = 0;

    if (gl_LocalInvocationID.x == 0) {
        for (uint i = 1; i < 16; i++) {
            offsetBuffer.offsets[i] = offsetBuffer.offsets[i-1] + cumulativeSum[i-1];
        }
    }
}