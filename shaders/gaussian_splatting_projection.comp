#version 450

#include "gaussian_splatting_types.glsl"

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

#extension GL_EXT_scalar_block_layout : enable

layout(scalar, set = 0, binding = 0) readonly buffer GaussiansSSBOIn {
   Gaussian gaussianIn[ ];
};


layout(set = 0, binding = 1) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout (scalar, set = 0, binding = 2) buffer outputGaussians {
    Gaussian2D gaussian2dOut[ ];
};


layout(push_constant) uniform PushConstants {
    uint numElements;
    uint gridSize;
    float screenWidth;
    float screenHeight;
} pushConstants;

#extension GL_EXT_debug_printf : enable

bool debug = false;

// DANGER: AI GENERATED CODE
mat3 quatToMat3(vec4 q) {
    float x = q.x, y = q.y, z = q.z, w = q.w;
    float xx = x * x, yy = y * y, zz = z * z;
    float xy = x * y, xz = x * z, yz = y * z;
    float wx = w * x, wy = w * y, wz = w * z;

    mat3 r = mat3(
        1.0 - 2.0 * (yy + zz),  2.0 * (xy - wz),        2.0 * (xz + wy),
        2.0 * (xy + wz),        1.0 - 2.0 * (xx + zz),  2.0 * (yz - wx),
        2.0 * (xz - wy),        2.0 * (yz + wx),        1.0 - 2.0 * (xx + yy)
    );

    return r;
    
}

mat2 calculateCovarianceMatrix2D(Gaussian gaussian) {
    mat3 S = mat3(
        gaussian.scale.x, 0.0, 0.0,
        0.0, gaussian.scale.y, 0.0,
        0.0, 0.0, gaussian.scale.z
    );

    mat3 R = quatToMat3(gaussian.rotation);

    mat3 M = S * R;

    mat3 cov3dInObjectSpace = transpose(M) * M;

    // compute camera space position t
    vec4 t4 = ubo.model * ubo.view * vec4(gaussian.position, 1.0);
    vec3 t = t4.xyz;


    // Compute tanFovX from camera parameters
    // Assuming projection matrix is perspective and symmetric
    // proj[0][0] = focalX, proj[1][1] = focalY
    float focalX = ubo.proj[0][0];
    float focalY = ubo.proj[1][1];
    float tanFovX = 1.0 / focalX;
    float tanFovY = 1.0 / focalY;

    // compute the jacobian as done by
    // https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/59f5f77e3ddbac3ed9db93ec2cfe99ed6c5d121d/cuda_rasterizer/forward.cu#L89

    // to clamp the projected position to a reasonable range on the screen
    // first, project to normalized device coordinates
    // then, clamp to a range that is slightly larger than the screen size
    // then project back to world coordinates
    const float limx = 1.3f * tanFovX;
    const float limy = 1.3f * tanFovY;
    const float txtz = t.x / t.z;
    const float tytz = t.y / t.z;
    t.x = min(limx, max(-limx, txtz)) * t.z;

    // note that y axis is inverted in Vulkan clip space
    // so we need to change max and min
    t.y = max(limy, min(-limy, tytz)) * t.z;

    mat3 J = mat3(
        focalX / t.z, 0.0f, -(focalX * t.x) / (t.z * t.z),
        0.0f, focalY / t.z, -(focalY * t.y) / (t.z * t.z),
        0, 0, 0);
    
    mat4 W4 = ubo.model * ubo.view;
    mat3 W = mat3(
        W4[0][0], W4[1][0], W4[2][0],
        W4[0][1], W4[1][1], W4[2][1],
        W4[0][2], W4[1][2], W4[2][2]
    );

    mat3 T = W * J;

    mat3 cov3dInCameraSpace = transpose(T) * transpose(cov3dInObjectSpace) * T; 

    mat2 cov2d = mat2(
        cov3dInCameraSpace[0][0], cov3dInCameraSpace[0][1],
        cov3dInCameraSpace[1][0], cov3dInCameraSpace[1][1]
    );

    return cov2d;
}

float computeSphericalHarmonicsColor(float base, float coeffs[15], vec3 direction) {

    float x = direction.x;
    float y = direction.y;
    float z = direction.z;

    float x2 = x * x;
    float y2 = y * y;
    float z2 = z * z;

    float sh[16];

    // Band 0
    sh[0] = 0.282095; // Y(0, 0)

    // Band 1
    sh[1] = -0.488603 * y;       // Y(1, -1)
    sh[2] = -0.488603 * z;       // Y(1,  0)
    sh[3] = -0.488603 * x;       // Y(1,  1)

    // Band 2
    sh[4] = 1.092548 * x * y;                 // Y(2, -2)
    sh[5] = -1.092548 * y * z;                // Y(2, -1)
    sh[6] = 0.315392 * (2.0 * z2 - x2 - y2);  // Y(2,  0)
    sh[7] = -1.092548 * x * z;                // Y(2,  1)
    sh[8] = 0.546274 * (x2 - y2);             // Y(2,  2)

    // Band 3
    sh[9]  = -0.590044 * y * (3.0 * x2 - y2);                   // Y(3, -3)
    sh[10] = 2.890611 * x * y * z;                              // Y(3, -2)
    sh[11] = -0.457046 * y * (4.0 * z2 - x2 - y2);              // Y(3, -1)
    sh[12] = 0.373176 * z * (2.0 * z2 - 3.0 * x2 - 3.0 * y2);   // Y(3,  0)
    sh[13] = -0.457046 * x * (4.0 * z2 - x2 - y2);              // Y(3,  1)
    sh[14] = 1.445306 * z * (x2 - y2);                          // Y(3,  2)
    sh[15] = -0.590044 * x * (x2 - 3.0 * y2);                   // Y(3,  3)

    float value = 0.5 + base * sh[0]; 
    for (int i = 0; i < 15; i++) {
        value += coeffs[i] * sh[i+1]; // Just sum them up for now, replace with actual SH computation
    }
    return value;
}

void main()
{
    uint index = gl_GlobalInvocationID.x;

    if (index >= pushConstants.numElements) {
        return; // Out of bounds
    }
    
    vec3 p = gaussianIn[index].position;

    vec4 position = ubo.proj * ubo.view * ubo.model * vec4(p, 1.0);

    if(debug && index == 0) {
        debugPrintfEXT("ubo.proj:\n[%f %f %f %f]\n[%f %f %f %f]\n[%f %f %f %f]\n[%f %f %f %f]\n",
            ubo.proj[0][0], ubo.proj[0][1], ubo.proj[0][2], ubo.proj[0][3],
            ubo.proj[1][0], ubo.proj[1][1], ubo.proj[1][2], ubo.proj[1][3],
            ubo.proj[2][0], ubo.proj[2][1], ubo.proj[2][2], ubo.proj[2][3],
            ubo.proj[3][0], ubo.proj[3][1], ubo.proj[3][2], ubo.proj[3][3]
        );

        debugPrintfEXT("ubo.view:\n[%f %f %f %f]\n[%f %f %f %f]\n[%f %f %f %f]\n[%f %f %f %f]\n",
            ubo.view[0][0], ubo.view[0][1], ubo.view[0][2], ubo.view[0][3],
            ubo.view[1][0], ubo.view[1][1], ubo.view[1][2], ubo.view[1][3],
            ubo.view[2][0], ubo.view[2][1], ubo.view[2][2], ubo.view[2][3],
            ubo.view[3][0], ubo.view[3][1], ubo.view[3][2], ubo.view[3][3]
        );

        debugPrintfEXT("ubo.model:\n[%f %f %f %f]\n[%f %f %f %f]\n[%f %f %f %f]\n[%f %f %f %f]\n",
            ubo.model[0][0], ubo.model[0][1], ubo.model[0][2], ubo.model[0][3],
            ubo.model[1][0], ubo.model[1][1], ubo.model[1][2], ubo.model[1][3],
            ubo.model[2][0], ubo.model[2][1], ubo.model[2][2], ubo.model[2][3],
            ubo.model[3][0], ubo.model[3][1], ubo.model[3][2], ubo.model[3][3]
        );
    }

    vec2 norm_pos = position.xy / position.w;
    vec3 u = position.xyz / position.w;
    Gaussian2D gaussian2d;

    gaussian2d.position = vec2((norm_pos.x+1.0)*256.0, (norm_pos.y+1.0)*256.0);
    gaussian2d.z = position.z;

    mat2 covariance = calculateCovarianceMatrix2D(gaussianIn[index]);
    // covariance /= position.w;

    covariance *= 512.0 * 512.0; // scale to pixel space
    // it is not mentioned in the original Gaussian Splatting paper, 
    // but they add a small value to the diagonal of the covariance matrix
    // so that each gaussian is at least a pixel wide
    // https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/59f5f77e3ddbac3ed9db93ec2cfe99ed6c5d121d/cuda_rasterizer/forward.cu#L109
    covariance[0][0] += 0.3;
    covariance[1][1] += 0.3;

    gaussian2d.covarianceInv = inverse(covariance);

    vec3 dir = normalize((ubo.model * ubo.view * vec4(gaussianIn[index].position, 1.0)).xyz);

    gaussian2d.color = vec3(
        computeSphericalHarmonicsColor(gaussianIn[index].color.r, gaussianIn[index].shR, dir),
        computeSphericalHarmonicsColor(gaussianIn[index].color.g, gaussianIn[index].shG, dir),
        computeSphericalHarmonicsColor(gaussianIn[index].color.b, gaussianIn[index].shB, dir)
    );

    gaussian2d.alpha = gaussianIn[index].alpha;

    gaussian2d.binMask = uint(-1); // set to a dummy value for now, should be set based on the binning logic in the next step

    // BINNING CODE MUST BE MOVED HERE FOR OPTIMAL PERFORMANCE
    gaussian2dOut[index] = gaussian2d;

    if (debug) {
       debugPrintfEXT("Index: %u, Position.z: %f\n", index, position.z);
    }

}