#version 450

#include "gaussian_splatting_radix_sort_include.glsl"

layout(local_size_x = 1) in;

void main() {
    uint bin = gl_GlobalInvocationID.x;
    if (bin >= 16) return;

    if (debug) {
        debugPrintfEXT("Processing bin %u\n", bin);
    }

    for(uint idx = 0; idx < inputBuffer2.numberTotalGaussians; idx++) {

        // get the value to sort (use z here)
        uint value = floatBitsToUint(inputBuffer.gaussians[idx].z);
        uint binMask = inputBuffer.gaussians[idx].binMask;

        // get the bin of the current value for the current pass
        uint element_bin = getBin(value, binMask, pushConstants.pass);

        if (element_bin == bin) {
            uint adder = atomicAdd(countBuffer.counts[bin], 1);
            uint finalPos = offsetBuffer.offsets[bin] + adder;
            outputBuffer.gaussians[finalPos] = inputBuffer.gaussians[idx];
            if (debug) {
                debugPrintfEXT("Output Gaussian[%u]: x=%f, y=%f, z=%f, binMask=%u\n", finalPos, outputBuffer.gaussians[finalPos].position.x, outputBuffer.gaussians[finalPos].position.y, outputBuffer.gaussians[finalPos].z, outputBuffer.gaussians[finalPos].binMask);
            }
        }

    }


 
}