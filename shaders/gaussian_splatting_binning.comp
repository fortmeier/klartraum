#version 450

#include "gaussian_splatting_types.glsl"

layout(local_size_x = 128) in;

#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_debug_printf : enable

layout(scalar, binding = 0) readonly buffer InputBuffer {
    Gaussian2D gaussians[];
} inputBuffer;

layout(scalar, binding = 1) buffer OutputBuffer {
    Gaussian2D gaussians[];
} outputBuffer;

layout(scalar, binding = 2) buffer OutputBuffer2 {
    uint numberTotalGaussians;
} outputBuffer2;

layout (scalar, binding = 3) buffer outputDispatchIndirect {
    DispatchIndirectCommand xyz;
} dispatchIndirectCommand;


layout(push_constant) uniform PushConstants {
    uint numElements;
    uint gridSize;
    float screenWidth;
    float screenHeight;
} pushConstants;

// Helper function to get the bin index for a position
uint getBinIndex(vec2 position) {
    // Calculate grid cell size
    float cellWidth = pushConstants.screenWidth / float(pushConstants.gridSize);
    float cellHeight = pushConstants.screenHeight / float(pushConstants.gridSize);
    
    // Calculate grid coordinates
    uint gridX = uint(position.x / cellWidth);
    uint gridY = uint(position.y / cellHeight);
    
    // Clamp to grid bounds
    gridX = min(gridX, pushConstants.gridSize - 1);
    gridY = min(gridY, pushConstants.gridSize - 1);
    
    // Convert 2D grid coordinates to 1D bin index
    return gridY * pushConstants.gridSize + gridX;
}

// Helper function to check if a gaussian overlaps with a bin
bool overlapsWithBin(Gaussian2D gaussian, uint binIndex) {
    // Calculate grid cell size
    float cellWidth = pushConstants.screenWidth / float(pushConstants.gridSize);
    float cellHeight = pushConstants.screenHeight / float(pushConstants.gridSize);
    
    // Calculate bin bounds
    uint gridX = binIndex % pushConstants.gridSize;
    uint gridY = binIndex / pushConstants.gridSize;
    
    vec2 binMin = vec2(gridX * cellWidth, gridY * cellHeight);
    vec2 binMax = vec2((gridX + 1) * cellWidth, (gridY + 1) * cellHeight);
    
    // Calculate gaussian bounds using covariance matrix
    // For simplicity, we'll use the diagonal elements of the covariance matrix
    // as a measure of the gaussian's spread
    //THIS SHOULD BE WORKED OUT PROPERLY
    mat2 covariance = inverse(gaussian.covarianceInv);
    float stdDevX = sqrt(covariance[0][0]);
    float stdDevY = sqrt(covariance[1][1]);
    float spreadX = stdDevX * 2.5; // Use 2.5 standard deviations for overlap check
    float spreadY = stdDevY * 2.5; // Use 2.5 standard deviations for overlap check

    vec2 gaussianMin = gaussian.position - vec2(spreadX, spreadY);
    vec2 gaussianMax = gaussian.position + vec2(spreadX, spreadY);

    // Check for overlap
    return !(gaussianMax.x < binMin.x || gaussianMin.x > binMax.x ||
             gaussianMax.y < binMin.y || gaussianMin.y > binMax.y);
}

bool debug = false;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint numberGridElements = pushConstants.gridSize * pushConstants.gridSize;

    if (idx >= pushConstants.numElements) return;

    barrier();

    // Get the gaussian
    Gaussian2D gaussian = inputBuffer.gaussians[idx];

    // Debug print: gaussian index, position, covariance, and binMask before assignment
    // if (debug) {
    //     debugPrintfEXT("Gaussian[%u]: pos=(%f,%f), cov=(%f,%f,%f,%f), binMask=0x%x\n",
    //         idx,
    //         gaussian.position.x, gaussian.position.y,
    //         gaussian.covarianceInv[0][0], gaussian.covarianceInv[0][1],
    //         gaussian.covarianceInv[1][0], gaussian.covarianceInv[1][1],
    //         gaussian.binMask
    //     );
    // }
    
    uint numberOverlappingBins = 0;
    // Find all bins this gaussian overlaps with
    // and for the first overlapping bin, set the binMask of the gaussian
    // for all other overlapping bins, create a new gaussian and put it at
    // the end of the list
    for (uint binIndex = 0; binIndex < numberGridElements; binIndex++) {
        if (overlapsWithBin(gaussian, binIndex)) {
            // Increment count for this bin
            numberOverlappingBins++;
            uint newGaussianIndex = atomicAdd(outputBuffer2.numberTotalGaussians, 1);
            Gaussian2D newGaussian = gaussian;

            if(newGaussianIndex < pushConstants.numElements * 2) {
                // Create a new gaussian for this bin
                newGaussian.binMask = 1 << binIndex; // Set the binMask to the current bin
                outputBuffer.gaussians[newGaussianIndex] = newGaussian;

                // Debug print: new gaussian created
                // debugPrintfEXT("New Gaussian[%u / %u]: pos=(%f,%f), cov=(%f,%f,%f,%f), binMask=0x%x\n",
                //     newGaussianIndex,
                //     pushConstants.numElements * 2,
                //     newGaussian.position.x, newGaussian.position.y,
                //     newGaussian.covariance[0][0], newGaussian.covariance[0][1],
                //     newGaussian.covariance[1][0], newGaussian.covariance[1][1],
                //     newGaussian.binMask
                // );

            } else {
                // Error: too many additional gaussians
                if (debug) {
                    debugPrintfEXT("Error: Too many additional gaussians created! Index: %u\n", newGaussianIndex);
                }
            }

            
        }
    }

    barrier();

    // THIS DOES ALSO NOT WORK
    // BUT CAN BE MADE WORKING SINCE IT CAN BE DONE
    // IN EACH WORKGROUP
    if (gl_LocalInvocationID.x == 0) {
        // Initialize the number of additional gaussians to zero
        atomicMin(outputBuffer2.numberTotalGaussians, pushConstants.numElements * 2);

        // compute the number of workgroups needed for the consecutive dispatches
        atomicMax(dispatchIndirectCommand.xyz.x, outputBuffer2.numberTotalGaussians / 128 + 1);

        dispatchIndirectCommand.xyz.y = 1;
        dispatchIndirectCommand.xyz.z = 1;

        // debugPrintfEXT("Total number of gaussians: %u\n", outputBuffer2.numberTotalGaussians);
    }
} 